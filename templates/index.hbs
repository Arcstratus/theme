{{!< default}}

<main class="min-h-screen">
  {{> hero-section}}
  {{> featured-section}}
  {{> latest-section}}
</main>

<style>
.stretched-link::after {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1;
  content: "";
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const { animate, stagger } = Motion;
  
  // Animate hero elements on load
  animate('#hero-logo', 
    { opacity: [0, 1], scale: [0.8, 1], rotate: [0, 360] }, 
    { duration: 0.8, easing: 'ease-out' }
  );
  
  animate('#hello-message', 
    { opacity: [0, 1], y: [30, 0] }, 
    { duration: 0.6, delay: 0.2, easing: 'ease-out' }
  );
  
  animate('#hero-subtitle', 
    { opacity: [0, 1], y: [20, 0] }, 
    { duration: 0.5, delay: 0.4, easing: 'ease-out' }
  );
  
  animate('#hero-description', 
    { opacity: [0, 1], y: [20, 0] }, 
    { duration: 0.5, delay: 0.6, easing: 'ease-out' }
  );
  
  animate('#hero-search', 
    { opacity: [0, 1], y: [30, 0] }, 
    { duration: 0.6, delay: 0.8, easing: 'ease-out' }
  );
  
  // Animate featured posts section on scroll
  const featuredSection = document.getElementById('featured-posts');
  if (featuredSection) {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Animate section title
          animate('#featured-title', 
            { opacity: [0, 1], y: [30, 0] }, 
            { duration: 0.6, easing: 'ease-out' }
          );
          
          animate('#featured-subtitle', 
            { opacity: [0, 1], y: [20, 0] }, 
            { duration: 0.5, delay: 0.2, easing: 'ease-out' }
          );
          
          // Animate post cards with stagger
          animate('.featured-post-card', 
            { opacity: [0, 1], y: [40, 0] }, 
            { duration: 0.5, delay: stagger(0.1, {start: 0.4}), easing: 'ease-out' }
          );
          
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });
    
    observer.observe(featuredSection);
  }
  
  // Animate latest posts section on scroll
  const latestSection = document.getElementById('latest-posts');
  if (latestSection) {
    const latestObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Animate section title
          animate('#latest-title', 
            { opacity: [0, 1], y: [30, 0] }, 
            { duration: 0.6, easing: 'ease-out' }
          );
          
          animate('#latest-subtitle', 
            { opacity: [0, 1], y: [20, 0] }, 
            { duration: 0.5, delay: 0.2, easing: 'ease-out' }
          );
          
          // Animate post cards with stagger
          animate('.latest-post-card', 
            { opacity: [0, 1], y: [40, 0] }, 
            { duration: 0.5, delay: stagger(0.1, {start: 0.4}), easing: 'ease-out' }
          );
          
          // Animate sidebar widgets with stagger
          animate('.sidebar-widget', 
            { opacity: [0, 1], x: [30, 0] }, 
            { duration: 0.5, delay: stagger(0.1, {start: 0.8}), easing: 'ease-out' }
          );
          
          latestObserver.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });
    
    latestObserver.observe(latestSection);
  }
  
  // Search trigger functionality
  const searchTrigger = document.getElementById('search-trigger');
  
  searchTrigger.addEventListener('click', function() {
    // Trigger Ghost's native search
    if (window.ghostSearchAPI) {
      window.ghostSearchAPI.open();
    } else {
      // Fallback: dispatch keyboard shortcut event
      const event = new KeyboardEvent('keydown', {
        key: 'k',
        code: 'KeyK',
        metaKey: true,
        ctrlKey: true
      });
      document.dispatchEvent(event);
    }
  });
  
  // Keyboard shortcut handler
  document.addEventListener('keydown', function(e) {
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault();
      searchTrigger.click();
    }
  });
  
  // Add hover animation to search button
  searchTrigger.addEventListener('mouseenter', function() {
    animate(this, 
      { scale: 1.02, y: -2 }, 
      { duration: 0.2, easing: 'ease-out' }
    );
  });
  
  searchTrigger.addEventListener('mouseleave', function() {
    animate(this, 
      { scale: 1, y: 0 }, 
      { duration: 0.2, easing: 'ease-out' }
    );
  });
});
</script>